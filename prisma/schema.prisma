// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  first_name       String
  last_name        String
  email            String    @unique
  age              Int
  location         String
  password         String
  phone_number     String
  file_name        String?
  file_path        String?
  created_at       DateTime  @default(now())
  last_time_online DateTime?
  status           Boolean   @default(false)
  is_super         Boolean   @default(false)
  is_admin         Boolean   @default(false)

  posts        Post[]
  Notification Notification[]
  Residue      Residue[]
}

model Post {
  id          String   @id @default(uuid())
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  author_id String
  author    User   @relation(fields: [author_id], references: [id])
}

model Notification {
  id          String   @id @default(uuid())
  description String
  read_status Boolean  @default(false)
  created_at  DateTime @default(now())

  receiver_id String
  receiver    User   @relation(fields: [receiver_id], references: [id])
}

model Residue {
  id          String   @id @default(uuid())
  created_at  DateTime @default(now())
  condition   String  @default("null")
  type        String
  description String
  file_path   String?
  file_name   String?
  price       Float?

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Visit {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
}
